
LedBlinkWithPwmOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080029c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080029c0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ddb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014c6  00000000  00000000  00028e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002adb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe5b  00000000  00000000  0002b800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008848  00000000  00000000  0003b65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000645ce  00000000  00000000  00043ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002728  00000000  00000000  000a84ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800295c 	.word	0x0800295c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800295c 	.word	0x0800295c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t value = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fabb 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f82d 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f927 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8f5 	bl	8000424 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800023a:	f000 f873 	bl	8000324 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <main+0x60>)
 8000240:	2100      	movs	r1, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fa90 	bl	8001768 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(value < 10000){
 8000248:	e008      	b.n	800025c <main+0x3c>
		  TIM3->CCR1 = value;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0x64>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
		  value += 50;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3332      	adds	r3, #50	; 0x32
 8000254:	607b      	str	r3, [r7, #4]
		  HAL_Delay(5);
 8000256:	2005      	movs	r0, #5
 8000258:	f000 fb08 	bl	800086c <HAL_Delay>
	  while(value < 10000){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <main+0x68>)
 8000260:	4293      	cmp	r3, r2
 8000262:	ddf2      	ble.n	800024a <main+0x2a>
	  }
	  while(value > 0){
 8000264:	e008      	b.n	8000278 <main+0x58>
		  TIM3->CCR1 = value;
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x64>)
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	635a      	str	r2, [r3, #52]	; 0x34
		  value -= 50;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3b32      	subs	r3, #50	; 0x32
 8000270:	607b      	str	r3, [r7, #4]
		  HAL_Delay(5);
 8000272:	2005      	movs	r0, #5
 8000274:	f000 fafa 	bl	800086c <HAL_Delay>
	  while(value > 0){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	dcf3      	bgt.n	8000266 <main+0x46>
	  while(value < 10000){
 800027e:	e7ed      	b.n	800025c <main+0x3c>
 8000280:	20000028 	.word	0x20000028
 8000284:	40000400 	.word	0x40000400
 8000288:	0000270f 	.word	0x0000270f

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b091      	sub	sp, #68	; 0x44
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2410      	movs	r4, #16
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	2330      	movs	r3, #48	; 0x30
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fb55 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fb4e 	bl	800294c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0212      	lsls	r2, r2, #8
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0352      	lsls	r2, r2, #13
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fd26 	bl	8000d34 <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002ec:	f000 f942 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	003b      	movs	r3, r7
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	003b      	movs	r3, r7
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f82f 	bl	8001370 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000316:	f000 f92d 	bl	8000574 <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b011      	add	sp, #68	; 0x44
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08e      	sub	sp, #56	; 0x38
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2328      	movs	r3, #40	; 0x28
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fb09 	bl	800294c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	2320      	movs	r3, #32
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2308      	movs	r3, #8
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fb01 	bl	800294c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	231c      	movs	r3, #28
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 fafa 	bl	800294c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000358:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <MX_TIM3_Init+0xf4>)
 800035a:	4a30      	ldr	r2, [pc, #192]	; (800041c <MX_TIM3_Init+0xf8>)
 800035c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_TIM3_Init+0xf4>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000364:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_TIM3_Init+0xf4>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_TIM3_Init+0xf4>)
 800036c:	4a2c      	ldr	r2, [pc, #176]	; (8000420 <MX_TIM3_Init+0xfc>)
 800036e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_TIM3_Init+0xf4>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_TIM3_Init+0xf4>)
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_TIM3_Init+0xf4>)
 800037e:	0018      	movs	r0, r3
 8000380:	f001 f94a 	bl	8001618 <HAL_TIM_Base_Init>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000388:	f000 f8f4 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038c:	2128      	movs	r1, #40	; 0x28
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0152      	lsls	r2, r2, #5
 8000394:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000396:	187a      	adds	r2, r7, r1
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_TIM3_Init+0xf4>)
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fb45 	bl	8001a2c <HAL_TIM_ConfigClockSource>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003a6:	f000 f8e5 	bl	8000574 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003aa:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_TIM3_Init+0xf4>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f983 	bl	80016b8 <HAL_TIM_PWM_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003b6:	f000 f8dd 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2120      	movs	r1, #32
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_TIM3_Init+0xf4>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 ff1a 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003d8:	f000 f8cc 	bl	8000574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2260      	movs	r2, #96	; 0x60
 80003e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f4:	1d39      	adds	r1, r7, #4
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_TIM3_Init+0xf4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fa66 	bl	80018cc <HAL_TIM_PWM_ConfigChannel>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000404:	f000 f8b6 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <MX_TIM3_Init+0xf4>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 f8f8 	bl	8000600 <HAL_TIM_MspPostInit>

}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b00e      	add	sp, #56	; 0x38
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000028 	.word	0x20000028
 800041c:	40000400 	.word	0x40000400
 8000420:	0000ffff 	.word	0x0000ffff

08000424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_USART2_UART_Init+0x58>)
 800042a:	4a15      	ldr	r2, [pc, #84]	; (8000480 <MX_USART2_UART_Init+0x5c>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000430:	2296      	movs	r2, #150	; 0x96
 8000432:	0212      	lsls	r2, r2, #8
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_USART2_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART2_UART_Init+0x58>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <MX_USART2_UART_Init+0x58>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 ff25 	bl	80022b8 <HAL_UART_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000472:	f000 f87f 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000070 	.word	0x20000070
 8000480:	40004400 	.word	0x40004400

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08b      	sub	sp, #44	; 0x2c
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2314      	movs	r3, #20
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 fa59 	bl	800294c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <MX_GPIO_Init+0xe4>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0309      	lsls	r1, r1, #12
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	031b      	lsls	r3, r3, #12
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	03c9      	lsls	r1, r1, #15
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	03db      	lsls	r3, r3, #15
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0289      	lsls	r1, r1, #10
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	029b      	lsls	r3, r3, #10
 80004e8:	4013      	ands	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	02c9      	lsls	r1, r1, #11
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_GPIO_Init+0xe4>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	02db      	lsls	r3, r3, #11
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800050a:	2390      	movs	r3, #144	; 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fbf0 	bl	8000cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0192      	lsls	r2, r2, #6
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_GPIO_Init+0xe8>)
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052c:	193b      	adds	r3, r7, r4
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <MX_GPIO_Init+0xec>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f000 fa70 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000538:	0021      	movs	r1, r4
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2220      	movs	r2, #32
 800053e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2201      	movs	r2, #1
 8000544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000552:	187a      	adds	r2, r7, r1
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fa5c 	bl	8000a18 <HAL_GPIO_Init>

}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b00b      	add	sp, #44	; 0x2c
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	10210000 	.word	0x10210000
 8000570:	48000800 	.word	0x48000800

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057a:	e7fe      	b.n	800057a <Error_Handler+0x6>

0800057c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0549      	lsls	r1, r1, #21
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_MspInit+0x44>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	4013      	ands	r3, r2
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_TIM_Base_MspInit+0x34>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10b      	bne.n	80005ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_TIM_Base_MspInit+0x38>)
 80005d8:	69da      	ldr	r2, [r3, #28]
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_TIM_Base_MspInit+0x38>)
 80005dc:	2102      	movs	r1, #2
 80005de:	430a      	orrs	r2, r1
 80005e0:	61da      	str	r2, [r3, #28]
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_TIM_Base_MspInit+0x38>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	2202      	movs	r2, #2
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b004      	add	sp, #16
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40000400 	.word	0x40000400
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	230c      	movs	r3, #12
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	0018      	movs	r0, r3
 800060e:	2314      	movs	r3, #20
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f002 f99a 	bl	800294c <memset>
  if(htim->Instance==TIM3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a15      	ldr	r2, [pc, #84]	; (8000674 <HAL_TIM_MspPostInit+0x74>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d123      	bne.n	800066a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_TIM_MspPostInit+0x78>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_TIM_MspPostInit+0x78>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	02c9      	lsls	r1, r1, #11
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_TIM_MspPostInit+0x78>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	02db      	lsls	r3, r3, #11
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063e:	210c      	movs	r1, #12
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2210      	movs	r2, #16
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	187b      	adds	r3, r7, r1
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_TIM_MspPostInit+0x7c>)
 8000662:	0019      	movs	r1, r3
 8000664:	0010      	movs	r0, r2
 8000666:	f000 f9d7 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b008      	add	sp, #32
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40000400 	.word	0x40000400
 8000678:	40021000 	.word	0x40021000
 800067c:	48000400 	.word	0x48000400

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2314      	movs	r3, #20
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 f95a 	bl	800294c <memset>
  if(huart->Instance==USART2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <HAL_UART_MspInit+0x90>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d132      	bne.n	8000708 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006a4:	69da      	ldr	r2, [r3, #28]
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0289      	lsls	r1, r1, #10
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006da:	2114      	movs	r1, #20
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2203      	movs	r2, #3
 80006f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	187a      	adds	r2, r7, r1
 80006fc:	2390      	movs	r3, #144	; 0x90
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f988 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b00a      	add	sp, #40	; 0x28
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f87a 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077a:	f7ff ffe4 	bl	8000746 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800077e:	f002 f8c1 	bl	8002904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fd4d 	bl	8000220 <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   r0, =_estack
 8000788:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	080029b4 	.word	0x080029b4
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	200000f8 	.word	0x200000f8

080007a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_IRQHandler>
	...

080007a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_Init+0x24>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_Init+0x24>)
 80007ae:	2110      	movs	r1, #16
 80007b0:	430a      	orrs	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 f809 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ba:	f7ff fedf 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_InitTick+0x5c>)
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_InitTick+0x60>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	0019      	movs	r1, r3
 80007de:	23fa      	movs	r3, #250	; 0xfa
 80007e0:	0098      	lsls	r0, r3, #2
 80007e2:	f7ff fc91 	bl	8000108 <__udivsi3>
 80007e6:	0003      	movs	r3, r0
 80007e8:	0019      	movs	r1, r3
 80007ea:	0020      	movs	r0, r4
 80007ec:	f7ff fc8c 	bl	8000108 <__udivsi3>
 80007f0:	0003      	movs	r3, r0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 f903 	bl	80009fe <HAL_SYSTICK_Config>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e00f      	b.n	8000820 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d80b      	bhi.n	800081e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	2301      	movs	r3, #1
 800080a:	425b      	negs	r3, r3
 800080c:	2200      	movs	r2, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f000 f8e0 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_InitTick+0x64>)
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b003      	add	sp, #12
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x1c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	001a      	movs	r2, r3
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x20>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	18d2      	adds	r2, r2, r3
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_IncTick+0x20>)
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000008 	.word	0x20000008
 8000854:	200000f4 	.word	0x200000f4

08000858 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HAL_GetTick+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200000f4 	.word	0x200000f4

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff fff0 	bl	8000858 <HAL_GetTick>
 8000878:	0003      	movs	r3, r0
 800087a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_Delay+0x40>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	001a      	movs	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	189b      	adds	r3, r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	f7ff ffe0 	bl	8000858 <HAL_GetTick>
 8000898:	0002      	movs	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b004      	add	sp, #16
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b7f      	cmp	r3, #127	; 0x7f
 80008c4:	d828      	bhi.n	8000918 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <__NVIC_SetPriority+0xd4>)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	589b      	ldr	r3, [r3, r2]
 80008d6:	1dfa      	adds	r2, r7, #7
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	0011      	movs	r1, r2
 80008dc:	2203      	movs	r2, #3
 80008de:	400a      	ands	r2, r1
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	4091      	lsls	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	401a      	ands	r2, r3
 80008ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	401a      	ands	r2, r3
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0018      	movs	r0, r3
 80008fc:	2303      	movs	r3, #3
 80008fe:	4003      	ands	r3, r0
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	481f      	ldr	r0, [pc, #124]	; (8000984 <__NVIC_SetPriority+0xd4>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	430a      	orrs	r2, r1
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000916:	e031      	b.n	800097c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <__NVIC_SetPriority+0xd8>)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0019      	movs	r1, r3
 8000920:	230f      	movs	r3, #15
 8000922:	400b      	ands	r3, r1
 8000924:	3b08      	subs	r3, #8
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	3306      	adds	r3, #6
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	3304      	adds	r3, #4
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1dfa      	adds	r2, r7, #7
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	0011      	movs	r1, r2
 8000938:	2203      	movs	r2, #3
 800093a:	400a      	ands	r2, r1
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	43d2      	mvns	r2, r2
 8000946:	401a      	ands	r2, r3
 8000948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	401a      	ands	r2, r3
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	2303      	movs	r3, #3
 800095a:	4003      	ands	r3, r0
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <__NVIC_SetPriority+0xd8>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001c      	movs	r4, r3
 8000968:	230f      	movs	r3, #15
 800096a:	4023      	ands	r3, r4
 800096c:	3b08      	subs	r3, #8
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	3306      	adds	r3, #6
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	18c3      	adds	r3, r0, r3
 8000978:	3304      	adds	r3, #4
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b003      	add	sp, #12
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <SysTick_Config+0x40>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d901      	bls.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e010      	b.n	80009c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <SysTick_Config+0x44>)
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	3a01      	subs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	2301      	movs	r3, #1
 80009ac:	425b      	negs	r3, r3
 80009ae:	2103      	movs	r1, #3
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff7d 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SysTick_Config+0x44>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x44>)
 80009be:	2207      	movs	r2, #7
 80009c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	00ffffff 	.word	0x00ffffff
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	210f      	movs	r1, #15
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	1c02      	adds	r2, r0, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ffbf 	bl	800098c <SysTick_Config>
 8000a0e:	0003      	movs	r3, r0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e14f      	b.n	8000cc8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <HAL_GPIO_Init+0x28>
 8000a3e:	e140      	b.n	8000cc2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d00b      	beq.n	8000a60 <HAL_GPIO_Init+0x48>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a54:	2b11      	cmp	r3, #17
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b12      	cmp	r3, #18
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	0013      	movs	r3, r2
 8000a70:	43da      	mvns	r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	409a      	lsls	r2, r3
 8000a82:	0013      	movs	r3, r2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	2201      	movs	r2, #1
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0xea>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d123      	bne.n	8000b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	08da      	lsrs	r2, r3, #3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	58d3      	ldr	r3, [r2, r3]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2207      	movs	r2, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2107      	movs	r1, #7
 8000b2e:	400b      	ands	r3, r1
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	08da      	lsrs	r2, r3, #3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3208      	adds	r2, #8
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	6939      	ldr	r1, [r7, #16]
 8000b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2203      	movs	r2, #3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	055b      	lsls	r3, r3, #21
 8000b86:	4013      	ands	r3, r2
 8000b88:	d100      	bne.n	8000b8c <HAL_GPIO_Init+0x174>
 8000b8a:	e09a      	b.n	8000cc2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	589b      	ldr	r3, [r3, r2]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	2390      	movs	r3, #144	; 0x90
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x1e2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x1de>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a43      	ldr	r2, [pc, #268]	; (8000cec <HAL_GPIO_Init+0x2d4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x1da>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <HAL_GPIO_Init+0x2d8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x1d6>
 8000bea:	2303      	movs	r3, #3
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	2103      	movs	r1, #3
 8000c00:	400a      	ands	r2, r1
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	4013      	ands	r3, r2
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	4013      	ands	r3, r2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	039b      	lsls	r3, r3, #14
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	40da      	lsrs	r2, r3
 8000cd0:	1e13      	subs	r3, r2, #0
 8000cd2:	d000      	beq.n	8000cd6 <HAL_GPIO_Init+0x2be>
 8000cd4:	e6a8      	b.n	8000a28 <HAL_GPIO_Init+0x10>
  } 
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b006      	add	sp, #24
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	0008      	movs	r0, r1
 8000d02:	0011      	movs	r1, r2
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	1c7b      	adds	r3, r7, #1
 8000d0c:	1c0a      	adds	r2, r1, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d10:	1c7b      	adds	r3, r7, #1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	881a      	ldrh	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e003      	b.n	8000d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e305      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <HAL_RCC_OscConfig+0x1e>
 8000d50:	e08d      	b.n	8000e6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d52:	4bc5      	ldr	r3, [pc, #788]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	220c      	movs	r2, #12
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d00e      	beq.n	8000d7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5e:	4bc2      	ldr	r3, [pc, #776]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	220c      	movs	r2, #12
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d116      	bne.n	8000d98 <HAL_RCC_OscConfig+0x64>
 8000d6a:	4bbf      	ldr	r3, [pc, #764]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	401a      	ands	r2, r3
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	025b      	lsls	r3, r3, #9
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d10d      	bne.n	8000d98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	4bba      	ldr	r3, [pc, #744]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x56>
 8000d88:	e070      	b.n	8000e6c <HAL_RCC_OscConfig+0x138>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d000      	beq.n	8000d94 <HAL_RCC_OscConfig+0x60>
 8000d92:	e06b      	b.n	8000e6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e2dc      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d107      	bne.n	8000db0 <HAL_RCC_OscConfig+0x7c>
 8000da0:	4bb1      	ldr	r3, [pc, #708]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4bb0      	ldr	r3, [pc, #704]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e02f      	b.n	8000e10 <HAL_RCC_OscConfig+0xdc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x9e>
 8000db8:	4bab      	ldr	r3, [pc, #684]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4baa      	ldr	r3, [pc, #680]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dbe:	49ab      	ldr	r1, [pc, #684]	; (800106c <HAL_RCC_OscConfig+0x338>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	4ba8      	ldr	r3, [pc, #672]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4ba7      	ldr	r3, [pc, #668]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dca:	49a9      	ldr	r1, [pc, #676]	; (8001070 <HAL_RCC_OscConfig+0x33c>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e01e      	b.n	8000e10 <HAL_RCC_OscConfig+0xdc>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d10e      	bne.n	8000df8 <HAL_RCC_OscConfig+0xc4>
 8000dda:	4ba3      	ldr	r3, [pc, #652]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4ba2      	ldr	r3, [pc, #648]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	02c9      	lsls	r1, r1, #11
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	4b9f      	ldr	r3, [pc, #636]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b9e      	ldr	r3, [pc, #632]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e00b      	b.n	8000e10 <HAL_RCC_OscConfig+0xdc>
 8000df8:	4b9b      	ldr	r3, [pc, #620]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b9a      	ldr	r3, [pc, #616]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dfe:	499b      	ldr	r1, [pc, #620]	; (800106c <HAL_RCC_OscConfig+0x338>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	4b98      	ldr	r3, [pc, #608]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b97      	ldr	r3, [pc, #604]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e0a:	4999      	ldr	r1, [pc, #612]	; (8001070 <HAL_RCC_OscConfig+0x33c>)
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d014      	beq.n	8000e42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fd1e 	bl	8000858 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fd19 	bl	8000858 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e28e      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	4b8c      	ldr	r3, [pc, #560]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0xee>
 8000e40:	e015      	b.n	8000e6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fd09 	bl	8000858 <HAL_GetTick>
 8000e46:	0003      	movs	r3, r0
 8000e48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fd04 	bl	8000858 <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e279      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	4b82      	ldr	r3, [pc, #520]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x118>
 8000e6a:	e000      	b.n	8000e6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2202      	movs	r2, #2
 8000e74:	4013      	ands	r3, r2
 8000e76:	d100      	bne.n	8000e7a <HAL_RCC_OscConfig+0x146>
 8000e78:	e06c      	b.n	8000f54 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e7a:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	220c      	movs	r2, #12
 8000e80:	4013      	ands	r3, r2
 8000e82:	d00e      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e84:	4b78      	ldr	r3, [pc, #480]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	220c      	movs	r2, #12
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d11f      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x19c>
 8000e90:	4b75      	ldr	r3, [pc, #468]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	23c0      	movs	r3, #192	; 0xc0
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	401a      	ands	r2, r3
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d116      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	4b71      	ldr	r3, [pc, #452]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d005      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x184>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d001      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e24c      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b6b      	ldr	r3, [pc, #428]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	22f8      	movs	r2, #248	; 0xf8
 8000ebe:	4393      	bics	r3, r2
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	00da      	lsls	r2, r3, #3
 8000ec8:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	e041      	b.n	8000f54 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d024      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	4b63      	ldr	r3, [pc, #396]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b62      	ldr	r3, [pc, #392]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fcb8 	bl	8000858 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fcb3 	bl	8000858 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e228      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	4b59      	ldr	r3, [pc, #356]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2202      	movs	r2, #2
 8000f06:	4013      	ands	r3, r2
 8000f08:	d0f1      	beq.n	8000eee <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	22f8      	movs	r2, #248	; 0xf8
 8000f10:	4393      	bics	r3, r2
 8000f12:	0019      	movs	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	00da      	lsls	r2, r3, #3
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e018      	b.n	8000f54 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc93 	bl	8000858 <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc8e 	bl	8000858 <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e203      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	d1f1      	bne.n	8000f38 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d036      	beq.n	8000fcc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fc71 	bl	8000858 <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc6c 	bl	8000858 <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1e1      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f1      	beq.n	8000f7c <HAL_RCC_OscConfig+0x248>
 8000f98:	e018      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fc57 	bl	8000858 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc52 	bl	8000858 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1c7      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d1f1      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d100      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2a4>
 8000fd6:	e0b5      	b.n	8001144 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd8:	231f      	movs	r3, #31
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000fe2:	69da      	ldr	r2, [r3, #28]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	055b      	lsls	r3, r3, #21
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d111      	bne.n	8001010 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000fee:	69da      	ldr	r2, [r3, #28]
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0549      	lsls	r1, r1, #21
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	61da      	str	r2, [r3, #28]
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	69da      	ldr	r2, [r3, #28]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	055b      	lsls	r3, r3, #21
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001008:	231f      	movs	r3, #31
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_RCC_OscConfig+0x340>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4013      	ands	r3, r2
 800101a:	d11a      	bne.n	8001052 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_RCC_OscConfig+0x340>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_RCC_OscConfig+0x340>)
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	0049      	lsls	r1, r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fc15 	bl	8000858 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001034:	f7ff fc10 	bl	8000858 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e185      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_RCC_OscConfig+0x340>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4013      	ands	r3, r2
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10e      	bne.n	8001078 <HAL_RCC_OscConfig+0x344>
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8001060:	2101      	movs	r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	621a      	str	r2, [r3, #32]
 8001066:	e035      	b.n	80010d4 <HAL_RCC_OscConfig+0x3a0>
 8001068:	40021000 	.word	0x40021000
 800106c:	fffeffff 	.word	0xfffeffff
 8001070:	fffbffff 	.word	0xfffbffff
 8001074:	40007000 	.word	0x40007000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x366>
 8001080:	4bb6      	ldr	r3, [pc, #728]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	4bb5      	ldr	r3, [pc, #724]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001086:	2101      	movs	r1, #1
 8001088:	438a      	bics	r2, r1
 800108a:	621a      	str	r2, [r3, #32]
 800108c:	4bb3      	ldr	r3, [pc, #716]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	4bb2      	ldr	r3, [pc, #712]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001092:	2104      	movs	r1, #4
 8001094:	438a      	bics	r2, r1
 8001096:	621a      	str	r2, [r3, #32]
 8001098:	e01c      	b.n	80010d4 <HAL_RCC_OscConfig+0x3a0>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x388>
 80010a2:	4bae      	ldr	r3, [pc, #696]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010a4:	6a1a      	ldr	r2, [r3, #32]
 80010a6:	4bad      	ldr	r3, [pc, #692]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010a8:	2104      	movs	r1, #4
 80010aa:	430a      	orrs	r2, r1
 80010ac:	621a      	str	r2, [r3, #32]
 80010ae:	4bab      	ldr	r3, [pc, #684]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010b0:	6a1a      	ldr	r2, [r3, #32]
 80010b2:	4baa      	ldr	r3, [pc, #680]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	621a      	str	r2, [r3, #32]
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0x3a0>
 80010bc:	4ba7      	ldr	r3, [pc, #668]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	4ba6      	ldr	r3, [pc, #664]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	438a      	bics	r2, r1
 80010c6:	621a      	str	r2, [r3, #32]
 80010c8:	4ba4      	ldr	r3, [pc, #656]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	4ba3      	ldr	r3, [pc, #652]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010ce:	2104      	movs	r1, #4
 80010d0:	438a      	bics	r2, r1
 80010d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d014      	beq.n	8001106 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fbbc 	bl	8000858 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	e009      	b.n	80010fa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fbb7 	bl	8000858 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	4a9b      	ldr	r2, [pc, #620]	; (8001360 <HAL_RCC_OscConfig+0x62c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e12b      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fa:	4b98      	ldr	r3, [pc, #608]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3b2>
 8001104:	e013      	b.n	800112e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fba7 	bl	8000858 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110e:	e009      	b.n	8001124 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fba2 	bl	8000858 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a91      	ldr	r2, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x62c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e116      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	4b8d      	ldr	r3, [pc, #564]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800112e:	231f      	movs	r3, #31
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	4b87      	ldr	r3, [pc, #540]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800113e:	4989      	ldr	r1, [pc, #548]	; (8001364 <HAL_RCC_OscConfig+0x630>)
 8001140:	400a      	ands	r2, r1
 8001142:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2210      	movs	r2, #16
 800114a:	4013      	ands	r3, r2
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d12a      	bne.n	80011ac <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115a:	4b80      	ldr	r3, [pc, #512]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800115c:	2104      	movs	r1, #4
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001162:	4b7e      	ldr	r3, [pc, #504]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001166:	4b7d      	ldr	r3, [pc, #500]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fb73 	bl	8000858 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001178:	f7ff fb6e 	bl	8000858 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e0e3      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d0f1      	beq.n	8001178 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001194:	4b71      	ldr	r3, [pc, #452]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	22f8      	movs	r2, #248	; 0xf8
 800119a:	4393      	bics	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	00da      	lsls	r2, r3, #3
 80011a4:	4b6d      	ldr	r3, [pc, #436]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
 80011aa:	e034      	b.n	8001216 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	3305      	adds	r3, #5
 80011b2:	d111      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011b4:	4b69      	ldr	r3, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c0:	4b66      	ldr	r3, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c4:	22f8      	movs	r2, #248	; 0xf8
 80011c6:	4393      	bics	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	00da      	lsls	r2, r3, #3
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	e01e      	b.n	8001216 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011d8:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011dc:	4b5f      	ldr	r3, [pc, #380]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011de:	2104      	movs	r1, #4
 80011e0:	430a      	orrs	r2, r1
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011e4:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e8:	4b5c      	ldr	r3, [pc, #368]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	438a      	bics	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fb32 	bl	8000858 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011fa:	f7ff fb2d 	bl	8000858 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0a2      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d1f1      	bne.n	80011fa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <HAL_RCC_OscConfig+0x4ec>
 800121e:	e097      	b.n	8001350 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001220:	4b4e      	ldr	r3, [pc, #312]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	2b08      	cmp	r3, #8
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x4fa>
 800122c:	e06b      	b.n	8001306 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d14c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001236:	4b49      	ldr	r3, [pc, #292]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800123c:	494a      	ldr	r1, [pc, #296]	; (8001368 <HAL_RCC_OscConfig+0x634>)
 800123e:	400a      	ands	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fb09 	bl	8000858 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124c:	f7ff fb04 	bl	8000858 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e079      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	049b      	lsls	r3, r3, #18
 8001266:	4013      	ands	r3, r2
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	220f      	movs	r2, #15
 8001270:	4393      	bics	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800127a:	430a      	orrs	r2, r1
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_RCC_OscConfig+0x638>)
 8001284:	4013      	ands	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	431a      	orrs	r2, r3
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0449      	lsls	r1, r1, #17
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fad7 	bl	8000858 <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fad2 	bl	8000858 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e047      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	049b      	lsls	r3, r3, #18
 80012ca:	4013      	ands	r3, r2
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x57c>
 80012ce:	e03f      	b.n	8001350 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80012d6:	4924      	ldr	r1, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x634>)
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fabc 	bl	8000858 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fab7 	bl	8000858 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e02c      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_RCC_OscConfig+0x628>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	049b      	lsls	r3, r3, #18
 8001300:	4013      	ands	r3, r2
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x5b2>
 8001304:	e024      	b.n	8001350 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e01f      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_RCC_OscConfig+0x628>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_OscConfig+0x628>)
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	23c0      	movs	r3, #192	; 0xc0
 8001322:	025b      	lsls	r3, r3, #9
 8001324:	401a      	ands	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	429a      	cmp	r2, r3
 800132c:	d10e      	bne.n	800134c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	220f      	movs	r2, #15
 8001332:	401a      	ands	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	23f0      	movs	r3, #240	; 0xf0
 8001340:	039b      	lsls	r3, r3, #14
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b008      	add	sp, #32
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40021000 	.word	0x40021000
 8001360:	00001388 	.word	0x00001388
 8001364:	efffffff 	.word	0xefffffff
 8001368:	feffffff 	.word	0xfeffffff
 800136c:	ffc27fff 	.word	0xffc27fff

08001370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b3      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d911      	bls.n	80013b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	4393      	bics	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4b55      	ldr	r3, [pc, #340]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e09a      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d015      	beq.n	80013ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4013      	ands	r3, r2
 80013c8:	d006      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ca:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	21e0      	movs	r1, #224	; 0xe0
 80013d2:	00c9      	lsls	r1, r1, #3
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	22f0      	movs	r2, #240	; 0xf0
 80013de:	4393      	bics	r3, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	d040      	beq.n	8001478 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	029b      	lsls	r3, r3, #10
 8001406:	4013      	ands	r3, r2
 8001408:	d114      	bne.n	8001434 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06e      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d108      	bne.n	8001434 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e062      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e05b      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2203      	movs	r2, #3
 800143a:	4393      	bics	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001448:	f7ff fa06 	bl	8000858 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001450:	e009      	b.n	8001466 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001452:	f7ff fa01 	bl	8000858 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_RCC_ClockConfig+0x18c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e042      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	220c      	movs	r2, #12
 800146c:	401a      	ands	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	429a      	cmp	r2, r3
 8001476:	d1ec      	bne.n	8001452 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d211      	bcs.n	80014aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2201      	movs	r2, #1
 800148c:	4393      	bics	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_RCC_ClockConfig+0x184>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e020      	b.n	80014ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2204      	movs	r2, #4
 80014b0:	4013      	ands	r3, r2
 80014b2:	d009      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_RCC_ClockConfig+0x190>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80014c4:	430a      	orrs	r2, r1
 80014c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014c8:	f000 f820 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80014cc:	0001      	movs	r1, r0
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_ClockConfig+0x188>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	220f      	movs	r2, #15
 80014d6:	4013      	ands	r3, r2
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_RCC_ClockConfig+0x194>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	000a      	movs	r2, r1
 80014de:	40da      	lsrs	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x198>)
 80014e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff f971 	bl	80007cc <HAL_InitTick>
  
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b004      	add	sp, #16
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40022000 	.word	0x40022000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	00001388 	.word	0x00001388
 8001500:	fffff8ff 	.word	0xfffff8ff
 8001504:	08002994 	.word	0x08002994
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b08f      	sub	sp, #60	; 0x3c
 8001510:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001512:	2314      	movs	r3, #20
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001518:	ca13      	ldmia	r2!, {r0, r1, r4}
 800151a:	c313      	stmia	r3!, {r0, r1, r4}
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001524:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001526:	c313      	stmia	r3!, {r0, r1, r4}
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	220c      	movs	r2, #12
 800154a:	4013      	ands	r3, r2
 800154c:	2b04      	cmp	r3, #4
 800154e:	d002      	beq.n	8001556 <HAL_RCC_GetSysClockFreq+0x4a>
 8001550:	2b08      	cmp	r3, #8
 8001552:	d003      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x50>
 8001554:	e02f      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800155a:	e02f      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	220f      	movs	r2, #15
 8001562:	4013      	ands	r3, r2
 8001564:	2214      	movs	r2, #20
 8001566:	18ba      	adds	r2, r7, r2
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	220f      	movs	r2, #15
 8001572:	4013      	ands	r3, r2
 8001574:	1d3a      	adds	r2, r7, #4
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800157a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800157c:	23c0      	movs	r3, #192	; 0xc0
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	401a      	ands	r2, r3
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	429a      	cmp	r2, r3
 8001588:	d109      	bne.n	800159e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800158a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800158e:	f7fe fdbb 	bl	8000108 <__udivsi3>
 8001592:	0003      	movs	r3, r0
 8001594:	001a      	movs	r2, r3
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	4353      	muls	r3, r2
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
 800159c:	e008      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800159e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015a2:	f7fe fdb1 	bl	8000108 <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	001a      	movs	r2, r3
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	4353      	muls	r3, r2
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015b4:	e002      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b00f      	add	sp, #60	; 0x3c
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	08002974 	.word	0x08002974
 80015cc:	08002984 	.word	0x08002984
 80015d0:	40021000 	.word	0x40021000
 80015d4:	007a1200 	.word	0x007a1200

080015d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000000 	.word	0x20000000

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f0:	f7ff fff2 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 80015f4:	0001      	movs	r1, r0
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	2207      	movs	r2, #7
 80015fe:	4013      	ands	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	40d9      	lsrs	r1, r3
 8001606:	000b      	movs	r3, r1
}    
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	080029a4 	.word	0x080029a4

08001618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e042      	b.n	80016b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	223d      	movs	r2, #61	; 0x3d
 800162e:	5c9b      	ldrb	r3, [r3, r2]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d107      	bne.n	8001646 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	223c      	movs	r2, #60	; 0x3c
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe ffbf 	bl	80005c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	223d      	movs	r2, #61	; 0x3d
 800164a:	2102      	movs	r1, #2
 800164c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3304      	adds	r3, #4
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f000 faa5 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2246      	movs	r2, #70	; 0x46
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	223e      	movs	r2, #62	; 0x3e
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	2101      	movs	r1, #1
 800167c:	5499      	strb	r1, [r3, r2]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2242      	movs	r2, #66	; 0x42
 800168a:	2101      	movs	r1, #1
 800168c:	5499      	strb	r1, [r3, r2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2243      	movs	r2, #67	; 0x43
 8001692:	2101      	movs	r1, #1
 8001694:	5499      	strb	r1, [r3, r2]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2244      	movs	r2, #68	; 0x44
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2245      	movs	r2, #69	; 0x45
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	223d      	movs	r2, #61	; 0x3d
 80016aa:	2101      	movs	r1, #1
 80016ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e042      	b.n	8001750 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	223d      	movs	r2, #61	; 0x3d
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	223c      	movs	r2, #60	; 0x3c
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 f839 	bl	8001758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223d      	movs	r2, #61	; 0x3d
 80016ea:	2102      	movs	r1, #2
 80016ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f000 fa55 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2246      	movs	r2, #70	; 0x46
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	223e      	movs	r2, #62	; 0x3e
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	223f      	movs	r2, #63	; 0x3f
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2241      	movs	r2, #65	; 0x41
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2242      	movs	r2, #66	; 0x42
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2243      	movs	r2, #67	; 0x43
 8001732:	2101      	movs	r1, #1
 8001734:	5499      	strb	r1, [r3, r2]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2244      	movs	r2, #68	; 0x44
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2245      	movs	r2, #69	; 0x45
 8001742:	2101      	movs	r1, #1
 8001744:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	223d      	movs	r2, #61	; 0x3d
 800174a:	2101      	movs	r1, #1
 800174c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d108      	bne.n	800178a <HAL_TIM_PWM_Start+0x22>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	223e      	movs	r2, #62	; 0x3e
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	4193      	sbcs	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	e01f      	b.n	80017ca <HAL_TIM_PWM_Start+0x62>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d108      	bne.n	80017a2 <HAL_TIM_PWM_Start+0x3a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	223f      	movs	r2, #63	; 0x3f
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	4193      	sbcs	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	e013      	b.n	80017ca <HAL_TIM_PWM_Start+0x62>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d108      	bne.n	80017ba <HAL_TIM_PWM_Start+0x52>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	5c9b      	ldrb	r3, [r3, r2]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	4193      	sbcs	r3, r2
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	e007      	b.n	80017ca <HAL_TIM_PWM_Start+0x62>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2241      	movs	r2, #65	; 0x41
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	4193      	sbcs	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06e      	b.n	80018b0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <HAL_TIM_PWM_Start+0x7a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	223e      	movs	r2, #62	; 0x3e
 80017dc:	2102      	movs	r1, #2
 80017de:	5499      	strb	r1, [r3, r2]
 80017e0:	e013      	b.n	800180a <HAL_TIM_PWM_Start+0xa2>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d104      	bne.n	80017f2 <HAL_TIM_PWM_Start+0x8a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	223f      	movs	r2, #63	; 0x3f
 80017ec:	2102      	movs	r1, #2
 80017ee:	5499      	strb	r1, [r3, r2]
 80017f0:	e00b      	b.n	800180a <HAL_TIM_PWM_Start+0xa2>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d104      	bne.n	8001802 <HAL_TIM_PWM_Start+0x9a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	2102      	movs	r1, #2
 80017fe:	5499      	strb	r1, [r3, r2]
 8001800:	e003      	b.n	800180a <HAL_TIM_PWM_Start+0xa2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2241      	movs	r2, #65	; 0x41
 8001806:	2102      	movs	r1, #2
 8001808:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fcd4 	bl	80021c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_TIM_PWM_Start+0x150>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00e      	beq.n	8001840 <HAL_TIM_PWM_Start+0xd8>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_TIM_PWM_Start+0x154>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_TIM_PWM_Start+0xd8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_TIM_PWM_Start+0x158>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d004      	beq.n	8001840 <HAL_TIM_PWM_Start+0xd8>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <HAL_TIM_PWM_Start+0x15c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_TIM_PWM_Start+0xdc>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_TIM_PWM_Start+0xde>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0209      	lsls	r1, r1, #8
 8001858:	430a      	orrs	r2, r1
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <HAL_TIM_PWM_Start+0x150>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d009      	beq.n	800187a <HAL_TIM_PWM_Start+0x112>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_TIM_PWM_Start+0x160>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_TIM_PWM_Start+0x112>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <HAL_TIM_PWM_Start+0x154>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d111      	bne.n	800189e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2207      	movs	r2, #7
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b06      	cmp	r3, #6
 800188a:	d010      	beq.n	80018ae <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189c:	e007      	b.n	80018ae <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40014000 	.word	0x40014000
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40014800 	.word	0x40014800
 80018c8:	40000400 	.word	0x40000400

080018cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	223c      	movs	r2, #60	; 0x3c
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e09c      	b.n	8001a20 <HAL_TIM_PWM_ConfigChannel+0x154>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	223c      	movs	r2, #60	; 0x3c
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d029      	beq.n	8001948 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80018f4:	d802      	bhi.n	80018fc <HAL_TIM_PWM_ConfigChannel+0x30>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80018fa:	e08c      	b.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d046      	beq.n	800198e <HAL_TIM_PWM_ConfigChannel+0xc2>
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d065      	beq.n	80019d0 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8001904:	e087      	b.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 f9c0 	bl	8001c94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2108      	movs	r1, #8
 8001920:	430a      	orrs	r2, r1
 8001922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2104      	movs	r1, #4
 8001930:	438a      	bics	r2, r1
 8001932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6999      	ldr	r1, [r3, #24]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	619a      	str	r2, [r3, #24]
      break;
 8001946:	e066      	b.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fa27 	bl	8001da4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0109      	lsls	r1, r1, #4
 8001964:	430a      	orrs	r2, r1
 8001966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	492d      	ldr	r1, [pc, #180]	; (8001a28 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8001974:	400a      	ands	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6999      	ldr	r1, [r3, #24]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	021a      	lsls	r2, r3, #8
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	619a      	str	r2, [r3, #24]
      break;
 800198c:	e043      	b.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	0011      	movs	r1, r2
 8001996:	0018      	movs	r0, r3
 8001998:	f000 fa88 	bl	8001eac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2108      	movs	r1, #8
 80019a8:	430a      	orrs	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2104      	movs	r1, #4
 80019b8:	438a      	bics	r2, r1
 80019ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69d9      	ldr	r1, [r3, #28]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	61da      	str	r2, [r3, #28]
      break;
 80019ce:	e022      	b.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 faed 	bl	8001fb8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0109      	lsls	r1, r1, #4
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	490b      	ldr	r1, [pc, #44]	; (8001a28 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69d9      	ldr	r1, [r3, #28]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	021a      	lsls	r2, r3, #8
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	61da      	str	r2, [r3, #28]
      break;
 8001a14:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	223c      	movs	r2, #60	; 0x3c
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fffffbff 	.word	0xfffffbff

08001a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223c      	movs	r2, #60	; 0x3c
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_TIM_ConfigClockSource+0x18>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e0ab      	b.n	8001b9c <HAL_TIM_ConfigClockSource+0x170>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	223c      	movs	r2, #60	; 0x3c
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	223d      	movs	r2, #61	; 0x3d
 8001a50:	2102      	movs	r1, #2
 8001a52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2277      	movs	r2, #119	; 0x77
 8001a60:	4393      	bics	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_TIM_ConfigClockSource+0x178>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b40      	cmp	r3, #64	; 0x40
 8001a7a:	d100      	bne.n	8001a7e <HAL_TIM_ConfigClockSource+0x52>
 8001a7c:	e06b      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x12a>
 8001a7e:	d80e      	bhi.n	8001a9e <HAL_TIM_ConfigClockSource+0x72>
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d100      	bne.n	8001a86 <HAL_TIM_ConfigClockSource+0x5a>
 8001a84:	e077      	b.n	8001b76 <HAL_TIM_ConfigClockSource+0x14a>
 8001a86:	d803      	bhi.n	8001a90 <HAL_TIM_ConfigClockSource+0x64>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d100      	bne.n	8001a8e <HAL_TIM_ConfigClockSource+0x62>
 8001a8c:	e073      	b.n	8001b76 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a8e:	e07c      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d100      	bne.n	8001a96 <HAL_TIM_ConfigClockSource+0x6a>
 8001a94:	e06f      	b.n	8001b76 <HAL_TIM_ConfigClockSource+0x14a>
 8001a96:	2b30      	cmp	r3, #48	; 0x30
 8001a98:	d100      	bne.n	8001a9c <HAL_TIM_ConfigClockSource+0x70>
 8001a9a:	e06c      	b.n	8001b76 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001a9c:	e075      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a9e:	2b70      	cmp	r3, #112	; 0x70
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x94>
 8001aa2:	d804      	bhi.n	8001aae <HAL_TIM_ConfigClockSource+0x82>
 8001aa4:	2b50      	cmp	r3, #80	; 0x50
 8001aa6:	d036      	beq.n	8001b16 <HAL_TIM_ConfigClockSource+0xea>
 8001aa8:	2b60      	cmp	r3, #96	; 0x60
 8001aaa:	d044      	beq.n	8001b36 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001aac:	e06d      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	0152      	lsls	r2, r2, #5
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d068      	beq.n	8001b88 <HAL_TIM_ConfigClockSource+0x15c>
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0192      	lsls	r2, r2, #6
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d017      	beq.n	8001aee <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001abe:	e064      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f000 fb56 	bl	8002180 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2277      	movs	r2, #119	; 0x77
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	609a      	str	r2, [r3, #8]
      break;
 8001aec:	e04d      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f000 fb3f 	bl	8002180 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	01c9      	lsls	r1, r1, #7
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
      break;
 8001b14:	e039      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	001a      	movs	r2, r3
 8001b24:	f000 fab2 	bl	800208c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2150      	movs	r1, #80	; 0x50
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 fb0c 	bl	800214c <TIM_ITRx_SetConfig>
      break;
 8001b34:	e029      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6859      	ldr	r1, [r3, #4]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	001a      	movs	r2, r3
 8001b44:	f000 fad0 	bl	80020e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2160      	movs	r1, #96	; 0x60
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 fafc 	bl	800214c <TIM_ITRx_SetConfig>
      break;
 8001b54:	e019      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	001a      	movs	r2, r3
 8001b64:	f000 fa92 	bl	800208c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 faec 	bl	800214c <TIM_ITRx_SetConfig>
      break;
 8001b74:	e009      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0019      	movs	r1, r3
 8001b80:	0010      	movs	r0, r2
 8001b82:	f000 fae3 	bl	800214c <TIM_ITRx_SetConfig>
        break;
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001b88:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	; 0x3d
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	223c      	movs	r2, #60	; 0x3c
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	ffff00ff 	.word	0xffff00ff

08001ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <TIM_Base_SetConfig+0xd0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <TIM_Base_SetConfig+0x20>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <TIM_Base_SetConfig+0xd4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2270      	movs	r2, #112	; 0x70
 8001bcc:	4393      	bics	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <TIM_Base_SetConfig+0xd0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <TIM_Base_SetConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <TIM_Base_SetConfig+0xd4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00f      	beq.n	8001c0a <TIM_Base_SetConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <TIM_Base_SetConfig+0xd8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00b      	beq.n	8001c0a <TIM_Base_SetConfig+0x62>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <TIM_Base_SetConfig+0xdc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <TIM_Base_SetConfig+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <TIM_Base_SetConfig+0xe0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d003      	beq.n	8001c0a <TIM_Base_SetConfig+0x62>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <TIM_Base_SetConfig+0xe4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d108      	bne.n	8001c1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <TIM_Base_SetConfig+0xe8>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	4393      	bics	r3, r2
 8001c22:	001a      	movs	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <TIM_Base_SetConfig+0xd0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00b      	beq.n	8001c62 <TIM_Base_SetConfig+0xba>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <TIM_Base_SetConfig+0xdc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <TIM_Base_SetConfig+0xba>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <TIM_Base_SetConfig+0xe0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d003      	beq.n	8001c62 <TIM_Base_SetConfig+0xba>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <TIM_Base_SetConfig+0xe4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d103      	bne.n	8001c6a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	615a      	str	r2, [r3, #20]
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b004      	add	sp, #16
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40002000 	.word	0x40002000
 8001c84:	40014000 	.word	0x40014000
 8001c88:	40014400 	.word	0x40014400
 8001c8c:	40014800 	.word	0x40014800
 8001c90:	fffffcff 	.word	0xfffffcff

08001c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2270      	movs	r2, #112	; 0x70
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	4393      	bics	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4393      	bics	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <TIM_OC1_SetConfig+0xf8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <TIM_OC1_SetConfig+0x76>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <TIM_OC1_SetConfig+0xfc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <TIM_OC1_SetConfig+0x76>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <TIM_OC1_SetConfig+0x100>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_OC1_SetConfig+0x76>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <TIM_OC1_SetConfig+0x104>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10c      	bne.n	8001d24 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4393      	bics	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4393      	bics	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <TIM_OC1_SetConfig+0xf8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00b      	beq.n	8001d44 <TIM_OC1_SetConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <TIM_OC1_SetConfig+0xfc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <TIM_OC1_SetConfig+0xb0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <TIM_OC1_SetConfig+0x100>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <TIM_OC1_SetConfig+0xb0>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <TIM_OC1_SetConfig+0x104>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <TIM_OC1_SetConfig+0x108>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <TIM_OC1_SetConfig+0x10c>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	621a      	str	r2, [r3, #32]
}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b006      	add	sp, #24
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	40014000 	.word	0x40014000
 8001d94:	40014400 	.word	0x40014400
 8001d98:	40014800 	.word	0x40014800
 8001d9c:	fffffeff 	.word	0xfffffeff
 8001da0:	fffffdff 	.word	0xfffffdff

08001da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	2210      	movs	r2, #16
 8001db4:	4393      	bics	r3, r2
 8001db6:	001a      	movs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <TIM_OC2_SetConfig+0xe8>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <TIM_OC2_SetConfig+0xec>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2220      	movs	r2, #32
 8001dee:	4393      	bics	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <TIM_OC2_SetConfig+0xf0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	4393      	bics	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <TIM_OC2_SetConfig+0xf0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00b      	beq.n	8001e42 <TIM_OC2_SetConfig+0x9e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	; (8001e98 <TIM_OC2_SetConfig+0xf4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <TIM_OC2_SetConfig+0x9e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <TIM_OC2_SetConfig+0xf8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d003      	beq.n	8001e42 <TIM_OC2_SetConfig+0x9e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <TIM_OC2_SetConfig+0xfc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d113      	bne.n	8001e6a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <TIM_OC2_SetConfig+0x100>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <TIM_OC2_SetConfig+0x104>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	621a      	str	r2, [r3, #32]
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b006      	add	sp, #24
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	ffff8fff 	.word	0xffff8fff
 8001e90:	fffffcff 	.word	0xfffffcff
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40014400 	.word	0x40014400
 8001ea0:	40014800 	.word	0x40014800
 8001ea4:	fffffbff 	.word	0xfffffbff
 8001ea8:	fffff7ff 	.word	0xfffff7ff

08001eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <TIM_OC3_SetConfig+0xe4>)
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2270      	movs	r2, #112	; 0x70
 8001ed8:	4393      	bics	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <TIM_OC3_SetConfig+0xe8>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <TIM_OC3_SetConfig+0xec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10d      	bne.n	8001f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <TIM_OC3_SetConfig+0xf0>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <TIM_OC3_SetConfig+0xf4>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <TIM_OC3_SetConfig+0xec>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <TIM_OC3_SetConfig+0x9a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <TIM_OC3_SetConfig+0xf8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <TIM_OC3_SetConfig+0x9a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <TIM_OC3_SetConfig+0xfc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <TIM_OC3_SetConfig+0x9a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <TIM_OC3_SetConfig+0x100>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d113      	bne.n	8001f6e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <TIM_OC3_SetConfig+0x104>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <TIM_OC3_SetConfig+0x108>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	621a      	str	r2, [r3, #32]
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b006      	add	sp, #24
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	fffffeff 	.word	0xfffffeff
 8001f94:	fffffdff 	.word	0xfffffdff
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	fffff7ff 	.word	0xfffff7ff
 8001fa0:	fffffbff 	.word	0xfffffbff
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	ffffefff 	.word	0xffffefff
 8001fb4:	ffffdfff 	.word	0xffffdfff

08001fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a28      	ldr	r2, [pc, #160]	; (8002068 <TIM_OC4_SetConfig+0xb0>)
 8001fc8:	401a      	ands	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <TIM_OC4_SetConfig+0xb4>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <TIM_OC4_SetConfig+0xb8>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <TIM_OC4_SetConfig+0xbc>)
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	031b      	lsls	r3, r3, #12
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <TIM_OC4_SetConfig+0xc0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00b      	beq.n	8002030 <TIM_OC4_SetConfig+0x78>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <TIM_OC4_SetConfig+0xc4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <TIM_OC4_SetConfig+0x78>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <TIM_OC4_SetConfig+0xc8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <TIM_OC4_SetConfig+0x78>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <TIM_OC4_SetConfig+0xcc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d109      	bne.n	8002044 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <TIM_OC4_SetConfig+0xd0>)
 8002034:	4013      	ands	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	621a      	str	r2, [r3, #32]
}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b006      	add	sp, #24
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	ffffefff 	.word	0xffffefff
 800206c:	ffff8fff 	.word	0xffff8fff
 8002070:	fffffcff 	.word	0xfffffcff
 8002074:	ffffdfff 	.word	0xffffdfff
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800
 8002088:	ffffbfff 	.word	0xffffbfff

0800208c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4393      	bics	r3, r2
 80020a6:	001a      	movs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	22f0      	movs	r2, #240	; 0xf0
 80020b6:	4393      	bics	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	220a      	movs	r2, #10
 80020c8:	4393      	bics	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b006      	add	sp, #24
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	2210      	movs	r2, #16
 80020fa:	4393      	bics	r3, r2
 80020fc:	001a      	movs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <TIM_TI2_ConfigInputStage+0x60>)
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	22a0      	movs	r2, #160	; 0xa0
 8002124:	4393      	bics	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	621a      	str	r2, [r3, #32]
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	ffff0fff 	.word	0xffff0fff

0800214c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2270      	movs	r2, #112	; 0x70
 8002160:	4393      	bics	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	2207      	movs	r2, #7
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <TIM_ETR_SetConfig+0x3c>)
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	021a      	lsls	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b006      	add	sp, #24
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffff00ff 	.word	0xffff00ff

080021c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	221f      	movs	r2, #31
 80021d0:	4013      	ands	r3, r2
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0013      	movs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	43d2      	mvns	r2, r2
 80021e2:	401a      	ands	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	211f      	movs	r1, #31
 80021f0:	400b      	ands	r3, r1
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4099      	lsls	r1, r3
 80021f6:	000b      	movs	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	621a      	str	r2, [r3, #32]
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b006      	add	sp, #24
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	223c      	movs	r2, #60	; 0x3c
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800221c:	2302      	movs	r3, #2
 800221e:	e041      	b.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	223c      	movs	r2, #60	; 0x3c
 8002224:	2101      	movs	r1, #1
 8002226:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	223d      	movs	r2, #61	; 0x3d
 800222c:	2102      	movs	r1, #2
 800222e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2270      	movs	r2, #112	; 0x70
 8002244:	4393      	bics	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d10c      	bne.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	4393      	bics	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	223d      	movs	r2, #61	; 0x3d
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	223c      	movs	r2, #60	; 0x3c
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40014000 	.word	0x40014000

080022b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e044      	b.n	8002354 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2274      	movs	r2, #116	; 0x74
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f7fe f9cf 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2224      	movs	r2, #36	; 0x24
 80022e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2101      	movs	r1, #1
 80022f4:	438a      	bics	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f830 	bl	8002360 <UART_SetConfig>
 8002300:	0003      	movs	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e024      	b.n	8002354 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 f979 	bl	800260c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	490d      	ldr	r1, [pc, #52]	; (800235c <HAL_UART_Init+0xa4>)
 8002326:	400a      	ands	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2108      	movs	r1, #8
 8002336:	438a      	bics	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fa11 	bl	8002774 <UART_CheckIdleState>
 8002352:	0003      	movs	r3, r0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fffff7ff 	.word	0xfffff7ff

08002360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002368:	231e      	movs	r3, #30
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a95      	ldr	r2, [pc, #596]	; (80025e4 <UART_SetConfig+0x284>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a90      	ldr	r2, [pc, #576]	; (80025e8 <UART_SetConfig+0x288>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a87      	ldr	r2, [pc, #540]	; (80025ec <UART_SetConfig+0x28c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	; (80025f0 <UART_SetConfig+0x290>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d125      	bne.n	8002432 <UART_SetConfig+0xd2>
 80023e6:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <UART_SetConfig+0x294>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	2203      	movs	r2, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d00f      	beq.n	8002412 <UART_SetConfig+0xb2>
 80023f2:	d304      	bcc.n	80023fe <UART_SetConfig+0x9e>
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d011      	beq.n	800241c <UART_SetConfig+0xbc>
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d005      	beq.n	8002408 <UART_SetConfig+0xa8>
 80023fc:	e013      	b.n	8002426 <UART_SetConfig+0xc6>
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e036      	b.n	8002476 <UART_SetConfig+0x116>
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e031      	b.n	8002476 <UART_SetConfig+0x116>
 8002412:	231f      	movs	r3, #31
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2204      	movs	r2, #4
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e02c      	b.n	8002476 <UART_SetConfig+0x116>
 800241c:	231f      	movs	r3, #31
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2208      	movs	r2, #8
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e027      	b.n	8002476 <UART_SetConfig+0x116>
 8002426:	231f      	movs	r3, #31
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2210      	movs	r2, #16
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	e021      	b.n	8002476 <UART_SetConfig+0x116>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a70      	ldr	r2, [pc, #448]	; (80025f8 <UART_SetConfig+0x298>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d104      	bne.n	8002446 <UART_SetConfig+0xe6>
 800243c:	231f      	movs	r3, #31
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e017      	b.n	8002476 <UART_SetConfig+0x116>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <UART_SetConfig+0x29c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d104      	bne.n	800245a <UART_SetConfig+0xfa>
 8002450:	231f      	movs	r3, #31
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e00d      	b.n	8002476 <UART_SetConfig+0x116>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a68      	ldr	r2, [pc, #416]	; (8002600 <UART_SetConfig+0x2a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d104      	bne.n	800246e <UART_SetConfig+0x10e>
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e003      	b.n	8002476 <UART_SetConfig+0x116>
 800246e:	231f      	movs	r3, #31
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2210      	movs	r2, #16
 8002474:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	429a      	cmp	r2, r3
 8002480:	d15c      	bne.n	800253c <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d00d      	beq.n	80024a8 <UART_SetConfig+0x148>
 800248c:	dc02      	bgt.n	8002494 <UART_SetConfig+0x134>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <UART_SetConfig+0x13e>
 8002492:	e015      	b.n	80024c0 <UART_SetConfig+0x160>
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00a      	beq.n	80024ae <UART_SetConfig+0x14e>
 8002498:	2b08      	cmp	r3, #8
 800249a:	d00d      	beq.n	80024b8 <UART_SetConfig+0x158>
 800249c:	e010      	b.n	80024c0 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff f8a5 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
        break;
 80024a6:	e012      	b.n	80024ce <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <UART_SetConfig+0x2a4>)
 80024aa:	61bb      	str	r3, [r7, #24]
        break;
 80024ac:	e00f      	b.n	80024ce <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ae:	f7ff f82d 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80024b2:	0003      	movs	r3, r0
 80024b4:	61bb      	str	r3, [r7, #24]
        break;
 80024b6:	e00a      	b.n	80024ce <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	61bb      	str	r3, [r7, #24]
        break;
 80024be:	e006      	b.n	80024ce <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024c4:	231e      	movs	r3, #30
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
        break;
 80024cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d100      	bne.n	80024d6 <UART_SetConfig+0x176>
 80024d4:	e079      	b.n	80025ca <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	005a      	lsls	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	18d2      	adds	r2, r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0019      	movs	r1, r3
 80024e8:	0010      	movs	r0, r2
 80024ea:	f7fd fe0d 	bl	8000108 <__udivsi3>
 80024ee:	0003      	movs	r3, r0
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	d91b      	bls.n	8002532 <UART_SetConfig+0x1d2>
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4a42      	ldr	r2, [pc, #264]	; (8002608 <UART_SetConfig+0x2a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d817      	bhi.n	8002532 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	b29a      	uxth	r2, r3
 8002506:	200e      	movs	r0, #14
 8002508:	183b      	adds	r3, r7, r0
 800250a:	210f      	movs	r1, #15
 800250c:	438a      	bics	r2, r1
 800250e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	b299      	uxth	r1, r3
 800251c:	183b      	adds	r3, r7, r0
 800251e:	183a      	adds	r2, r7, r0
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	183a      	adds	r2, r7, r0
 800252c:	8812      	ldrh	r2, [r2, #0]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	e04b      	b.n	80025ca <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8002532:	231e      	movs	r3, #30
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e046      	b.n	80025ca <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800253c:	231f      	movs	r3, #31
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d00d      	beq.n	8002562 <UART_SetConfig+0x202>
 8002546:	dc02      	bgt.n	800254e <UART_SetConfig+0x1ee>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <UART_SetConfig+0x1f8>
 800254c:	e015      	b.n	800257a <UART_SetConfig+0x21a>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d00a      	beq.n	8002568 <UART_SetConfig+0x208>
 8002552:	2b08      	cmp	r3, #8
 8002554:	d00d      	beq.n	8002572 <UART_SetConfig+0x212>
 8002556:	e010      	b.n	800257a <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002558:	f7ff f848 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 800255c:	0003      	movs	r3, r0
 800255e:	61bb      	str	r3, [r7, #24]
        break;
 8002560:	e012      	b.n	8002588 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <UART_SetConfig+0x2a4>)
 8002564:	61bb      	str	r3, [r7, #24]
        break;
 8002566:	e00f      	b.n	8002588 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002568:	f7fe ffd0 	bl	800150c <HAL_RCC_GetSysClockFreq>
 800256c:	0003      	movs	r3, r0
 800256e:	61bb      	str	r3, [r7, #24]
        break;
 8002570:	e00a      	b.n	8002588 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	61bb      	str	r3, [r7, #24]
        break;
 8002578:	e006      	b.n	8002588 <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800257e:	231e      	movs	r3, #30
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
        break;
 8002586:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01d      	beq.n	80025ca <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	085a      	lsrs	r2, r3, #1
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	18d2      	adds	r2, r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0019      	movs	r1, r3
 800259e:	0010      	movs	r0, r2
 80025a0:	f7fd fdb2 	bl	8000108 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d908      	bls.n	80025c2 <UART_SetConfig+0x262>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <UART_SetConfig+0x2a8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d804      	bhi.n	80025c2 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	e003      	b.n	80025ca <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 80025c2:	231e      	movs	r3, #30
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025d6:	231e      	movs	r3, #30
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b008      	add	sp, #32
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	efff69f3 	.word	0xefff69f3
 80025e8:	ffffcfff 	.word	0xffffcfff
 80025ec:	fffff4ff 	.word	0xfffff4ff
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40004400 	.word	0x40004400
 80025fc:	40004800 	.word	0x40004800
 8002600:	40004c00 	.word	0x40004c00
 8002604:	007a1200 	.word	0x007a1200
 8002608:	0000ffff 	.word	0x0000ffff

0800260c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2201      	movs	r2, #1
 800261a:	4013      	ands	r3, r2
 800261c:	d00b      	beq.n	8002636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a4a      	ldr	r2, [pc, #296]	; (8002750 <UART_AdvFeatureConfig+0x144>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d00b      	beq.n	8002658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a43      	ldr	r2, [pc, #268]	; (8002754 <UART_AdvFeatureConfig+0x148>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2204      	movs	r2, #4
 800265e:	4013      	ands	r3, r2
 8002660:	d00b      	beq.n	800267a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <UART_AdvFeatureConfig+0x14c>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2208      	movs	r2, #8
 8002680:	4013      	ands	r3, r2
 8002682:	d00b      	beq.n	800269c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <UART_AdvFeatureConfig+0x150>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2210      	movs	r2, #16
 80026a2:	4013      	ands	r3, r2
 80026a4:	d00b      	beq.n	80026be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <UART_AdvFeatureConfig+0x154>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2220      	movs	r2, #32
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4a25      	ldr	r2, [pc, #148]	; (8002764 <UART_AdvFeatureConfig+0x158>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	4013      	ands	r3, r2
 80026e8:	d01d      	beq.n	8002726 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <UART_AdvFeatureConfig+0x15c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	035b      	lsls	r3, r3, #13
 800270a:	429a      	cmp	r2, r3
 800270c:	d10b      	bne.n	8002726 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <UART_AdvFeatureConfig+0x160>)
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	4013      	ands	r3, r2
 800272e:	d00b      	beq.n	8002748 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <UART_AdvFeatureConfig+0x164>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
  }
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}
 8002750:	fffdffff 	.word	0xfffdffff
 8002754:	fffeffff 	.word	0xfffeffff
 8002758:	fffbffff 	.word	0xfffbffff
 800275c:	ffff7fff 	.word	0xffff7fff
 8002760:	ffffefff 	.word	0xffffefff
 8002764:	ffffdfff 	.word	0xffffdfff
 8002768:	ffefffff 	.word	0xffefffff
 800276c:	ff9fffff 	.word	0xff9fffff
 8002770:	fff7ffff 	.word	0xfff7ffff

08002774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	2100      	movs	r1, #0
 8002782:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002784:	f7fe f868 	bl	8000858 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2208      	movs	r2, #8
 8002794:	4013      	ands	r3, r2
 8002796:	2b08      	cmp	r3, #8
 8002798:	d10d      	bne.n	80027b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	0399      	lsls	r1, r3, #14
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <UART_CheckIdleState+0x90>)
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	0013      	movs	r3, r2
 80027a8:	2200      	movs	r2, #0
 80027aa:	f000 f82d 	bl	8002808 <UART_WaitOnFlagUntilTimeout>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e022      	b.n	80027fc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2204      	movs	r2, #4
 80027be:	4013      	ands	r3, r2
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d10d      	bne.n	80027e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	03d9      	lsls	r1, r3, #15
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <UART_CheckIdleState+0x90>)
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	0013      	movs	r3, r2
 80027d2:	2200      	movs	r2, #0
 80027d4:	f000 f818 	bl	8002808 <UART_WaitOnFlagUntilTimeout>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e00d      	b.n	80027fc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2274      	movs	r2, #116	; 0x74
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b004      	add	sp, #16
 8002802:	bd80      	pop	{r7, pc}
 8002804:	01ffffff 	.word	0x01ffffff

08002808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002818:	e05e      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	3301      	adds	r3, #1
 800281e:	d05b      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7fe f81a 	bl	8000858 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d11b      	bne.n	800286e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	492f      	ldr	r1, [pc, #188]	; (8002900 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	438a      	bics	r2, r1
 8002854:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2274      	movs	r2, #116	; 0x74
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e044      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	d02e      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	401a      	ands	r2, r3
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	429a      	cmp	r2, r3
 800288c:	d124      	bne.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4917      	ldr	r1, [pc, #92]	; (8002900 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	2120      	movs	r1, #32
 80028ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2274      	movs	r2, #116	; 0x74
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e00f      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	425a      	negs	r2, r3
 80028e8:	4153      	adcs	r3, r2
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	001a      	movs	r2, r3
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d091      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b004      	add	sp, #16
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	fffffe5f 	.word	0xfffffe5f

08002904 <__libc_init_array>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	2600      	movs	r6, #0
 8002908:	4d0c      	ldr	r5, [pc, #48]	; (800293c <__libc_init_array+0x38>)
 800290a:	4c0d      	ldr	r4, [pc, #52]	; (8002940 <__libc_init_array+0x3c>)
 800290c:	1b64      	subs	r4, r4, r5
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	42a6      	cmp	r6, r4
 8002912:	d109      	bne.n	8002928 <__libc_init_array+0x24>
 8002914:	2600      	movs	r6, #0
 8002916:	f000 f821 	bl	800295c <_init>
 800291a:	4d0a      	ldr	r5, [pc, #40]	; (8002944 <__libc_init_array+0x40>)
 800291c:	4c0a      	ldr	r4, [pc, #40]	; (8002948 <__libc_init_array+0x44>)
 800291e:	1b64      	subs	r4, r4, r5
 8002920:	10a4      	asrs	r4, r4, #2
 8002922:	42a6      	cmp	r6, r4
 8002924:	d105      	bne.n	8002932 <__libc_init_array+0x2e>
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	00b3      	lsls	r3, r6, #2
 800292a:	58eb      	ldr	r3, [r5, r3]
 800292c:	4798      	blx	r3
 800292e:	3601      	adds	r6, #1
 8002930:	e7ee      	b.n	8002910 <__libc_init_array+0xc>
 8002932:	00b3      	lsls	r3, r6, #2
 8002934:	58eb      	ldr	r3, [r5, r3]
 8002936:	4798      	blx	r3
 8002938:	3601      	adds	r6, #1
 800293a:	e7f2      	b.n	8002922 <__libc_init_array+0x1e>
 800293c:	080029ac 	.word	0x080029ac
 8002940:	080029ac 	.word	0x080029ac
 8002944:	080029ac 	.word	0x080029ac
 8002948:	080029b0 	.word	0x080029b0

0800294c <memset>:
 800294c:	0003      	movs	r3, r0
 800294e:	1812      	adds	r2, r2, r0
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <_init>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr

08002968 <_fini>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr
